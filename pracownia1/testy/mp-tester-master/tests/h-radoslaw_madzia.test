:- module(radoslaw_madzia_tests, [tests/5]).

% definiujemy operatory ~/1 oraz v/2
:- op(200, fx, ~).
:- op(500, xfy, v).

% tests(wrong, validity, A, 500, solution([p,t])).

tests(excluded_middle, validity, [p v ~p], 500, solution([(p,t)])).

tests(empty, validity, [], 500, count(0)).

tests(single, validity, [p], 500, solution([(p, t)])).
tests(single, validity, [p], 500, count(1)).
tests(single_negative, validity, [~p], 500, solution([(p, f)])).
tests(single_negativec, validity, [~p], 500, count(1)).

tests(double_literals, validity, [p,q], 500, solution([(p,t),(q,t)])).
tests(double_literalsc, validity, [p,q], 500, count(1)).
tests(double_literals_negative, validity, [~p,~q], 500, solution([(p,f),(q,f)])).
tests(double_literals_negativec, validity, [~p,~q], 500, count(1)).

tests(triple_literals, validity, [p, q, r], 800, solution([(p,t),(q,t),(r,t)])).
tests(triple_literalss, validity, [p, q, r], 800, count(1)).
tests(triple_literals_negative,validity, [~p, ~q, ~r], 800, solution([(p,f),(q,f),(r,f)])).
tests(triple_literals_negativec, validity,[~p, ~q, ~r], 800,count(1)).

tests(many_solutions, validity,[a v b v c v d v e v f], 10000, count(63)).

% tautologie
tests(simplification, validity, [~p v ~q v p], 500, solution([(p,t),(q,f)])).

tests(prawo_kompozycji, validity,[~p v r v p v q, ~p v r v ~r],500,solution([(p,t),(q,t),(r,t)])).

tests(duns_szkots, validity,[p v ~p v q],500, solution([(p,f),(q,t)])).

tests(law_of_identity, validity,[p v ~p v p, p v ~p v ~p], 500,solution([(p,f)])).

tests(eksportacjia, validity,[~p v ~q v r v p, ~p v ~q v r v q, ~p v ~q v r v ~r] , 500, solution([(p,t),(q,f), (r,t)]) ).

tests(de_morgan_s,validity, [~p v ~q v p, ~p v ~q v q, ~p v ~q v p, ~p v ~q v q], 500, solution([(p,f),(q,f)])).

tests(sylogizm_hipotetyczny, validity, [p v ~p v r v q,~q v ~p v r v q, p v~p v r v ~r], 500, solution([(p,f),(q,f),(r,t)])).

tests(duns_szkot_c, validity,[p v ~p v q],500, count(4)).

tests(sylogizm_hipotetyczny_c, validity, [p v ~p v r v q,~q v ~p v r v q, p v~p v r v ~r], 500, count(8)).

tests(de_morgan_c,validity, [~p v ~q v p, ~p v ~q v q, ~p v ~q v p, ~p v ~q v q], 500, count(4)).
%-----------------------------------------------------------------------------------------------------
tests(test_1, validity, [p v ~p,q], 500, solution([(p,t),(q,t)])).

tests(none, validity, [~p v q,p,~q], 500, count(0)).
tests(none_2, validity, [p, ~p], 500, count(0)).
tests(none_3, validity, [p v r, q v s, q v r, ~p v ~q, s v p, ~r v ~s], 500, count(0)).
tests(none_4, validity, [~p v q, ~p v ~r v s, ~q v r,p,~s], 500, count(0)).
tests(none_5, validity, [~q v p v ~r,r,p,q,~q, q v ~p v r], 500, count(0)).
tests(none_6, validity, [q v p, ~p, p], 500, count(0)).
tests(none_7, validity, [p, ~p v q ,~q], 500, count(0)).
tests(none_8, validity, [q v q, ~q], 500, count(0)).

tests(np_or_q_and_nr_or_ns , validity, [~p v q, ~r v ~s], 500, count(9)).
tests(np_or_q_and_nr_or_ns , validity, [~p v q, ~r v ~s], 500, solution([(p, f), (q, f), (r, f), (s, f)])).
tests(np_or_q_or_r_or_ns , validity, [~p v ~q v r v ~s], 500, count(15)).


tests(test_2,validity, [r v z v r v ~p v q, r v z v r v p, r v z v r v ~q, r v z v s, r v s ], 5000, solution([(p,t),(q,f),(r,f),(s,t),(z,t)])).
tests(test_2c,validity, [r v z v r v ~p v q, r v z v r v p, r v z v r v ~q, r v z v s, r v s ], 5000, count(20)).
tests(test_3_performance,performance, [z v ~p v q v r v r v b, z v p v r v r v b, z v ~q v r v r v b, z v ~p v q v s v r v b, z v p v s v r v b, z v ~q v s v r v b, s v r v b, z v ~p v q v r v a v b, z v p v r v a v b, z v ~q v r v a v b, z v ~q v q v s v a v b, z v p v s v a v b, z v ~q v s v a v b, s v a v b, z v ~q v q v r v r v c, z v p v r v r v c, z v ~q v r v r v c, z v ~p v q v s v r v c, z v p v s v r v c, z v ~q v s v r v c, s v r v c, z v ~p v q v r v a v c, z v p v r v a v c, z v ~q v r v a v c, z v ~p v q v r v s v a v c, z v p v s v a v c, z v ~q v s v a v c, s v a v c], 8000, solution([(z,f),(p,f), (q,f), (r,f),(b,t),(s,f), (a,f), (c,t)])).
tests(test_3c_performance,performance, [z v ~p v q v r v r v b, z v p v r v r v b, z v ~q v r v r v b, z v ~p v q v s v r v b, z v p v s v r v b, z v ~q v s v r v b, s v r v b, z v ~p v q v r v a v b, z v p v r v a v b, z v ~q v r v a v b, z v ~q v q v s v a v b, z v p v s v a v b, z v ~q v s v a v b, s v a v b, z v ~q v q v r v r v c, z v p v r v r v c, z v ~q v r v r v c, z v ~p v q v s v r v c, z v p v s v r v c, z v ~q v s v r v c, s v r v c, z v ~p v q v r v a v c, z v p v r v a v c, z v ~q v r v a v c, z v ~p v q v r v s v a v c, z v p v s v a v c, z v ~q v s v a v c, s v a v c], 8000, count(161)).
tests(test_4_performance,performance, [a v b v c v d v e v f v g v h v i v j ], 2000, count(1023)).
tests(test_5_performance,performance, [p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q,p v ~q ], 1000, count(3)).

tests(test_4, validity, [p v ~p, ~p v p], 500, count(2)).
tests(test_5, validity, [p  v q, ~q], 500, solution([(p, t), (q, f)])).
tests(test_6, validity, [p , ~q], 500, solution([(p, t), (q, f)])).
tests(test_7, validity, [p v ~p v ~q v q, q v ~q, ~p v p], 500, solution([(p, t), (q, f)])).
tests(test_8, validity, [p v q v r, ~r v ~q v p, ~q v r, ~r v p], 500, solution([(p, t), (q, f),(r,f)])).
tests(test_9, validity, [p v~p,p], 500, solution([(p, t)])).


